def solve_colored_objects(input_text):
    # Step 1: Start by identifying the objects along with their associated properties, such as color and spatial positioning from the input text. Show the list of objects.
    objects_list = extract_objects(input_text)
    print("Objects and their properties:", objects_list)

    # Step 2: Identify the specific question asked. Determine whether the question is about identifying the color of a specific object, counting objects of a certain color, or reasoning about the spatial arrangement of objects and output the question type.
    question = extract_question(input_text)
    print("Question specifics:", question)

    # Step 3: Identify and list up available options provided in the input text.
    options = input_text.split("\n")[-5:]

    # Step 4: Process according to the question type and show what the question type is:
    # If the question is about identifying color, identify and ouput the target object the question is asking for the color of. Determine and output its color. 
    if question['type'] == 'identify_color':
        print("Question type is = identify_color")
        print(f"Identifying color for: {question['details']}")
        target_object = target(objects_list, question['details'])
        print(f"The question is asking for the color of : {target_object}")
        pre_answer = extract_color(target_object, question['details'])
        print(f"Identified color: {pre_answer}")

    # If the question is about counting objects, identify and ouput the objects the question is asking for the number of. Go through each object in the list in steps and count each object. Show the counting steps. Output the final number of objects that meet the specified criteria (e.g., a specific color). 
    elif question['type'] == 'count_objects':
        print("Question type is = count_objects")
        print(f"Counting objects for: {question['details']}")
        print("Total iterations:", len(objects_list))
        for i, object in enumerate(objects_list):
            single_object_count = count_single_object(object, question['details'])
            intermediate_count += single_object_count
            print(f"Step ({i}) - {object}: {single_object_count}, Intermediate count: {intermediate_count}")
        pre_answer = count_objects(objects_list, question['details'])
        print(f"Objects count: {pre_answer}")

    # If the question is about spatial reasoning, identify and ouput the relative positions the question is asking for. Arrange the objects from left to right and output the order. Determine the relative positions of objects and output the result.
    elif question['type'] == 'spatial_reasoning':
        print("Question type is = spatial_reasoning")
        print(f"Applying spatial reasoning for: {question['details']}")
        arranged_object = arrange_from_left_to_right(objects_list)
        print(f"Arraged objects: {arranged_object})
        pre_answer = spatial_reasoning(arranged_object, question['details'])
        print(f"Spatial reasoning result: {pre_answer}")

    # Step 5: Recall the identified options and match the outcome of Step 4 (the identified color, the count of objects, or the result of spatial reasoning) with the provided options to determine the correct answer.
    answer = find_correct_option(pre_answer, options)
    
    # Step 6: Return the final answer chosen at Step 5.
    return answer