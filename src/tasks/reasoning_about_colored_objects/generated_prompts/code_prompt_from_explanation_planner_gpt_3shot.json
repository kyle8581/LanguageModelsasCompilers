{
    "input": [
        "Generate the code prompt for the last task using the similar style of the example codes. Implement the code prompt as much as you can and describe the logic in code following the provided explanation but do not make a code that is biased toward a single task example instance. For example, do not use hard-coded variables that are obtained from task instances (e.g., using specific name of person in the question). The code prompt must be able to be applied to various instances of same task. When returning the final answer, carefully consider the output format. Especially, for the multiple choice questions, the final answer should be one of the given options. The main function name should be 'solve_colored_objects'. Along with the main function, you may want to define some helper functions that might be helpful for implementing the 'solve_colored_objects'. But you don't have to explicitly implement the helper functions, but just define them with function name and a single-line explanation in comment. When constructing the main function, actively use 'if else statement' to take different reasoning paths based on the condition, 'loop' to efficiently process the repititive instructions, 'dictionary' to keep track of connections between important variables, and 'print()' to output enough intermediate reasoning steps towards the answer and keep tracking changes of important variables. In a free format reasoning step, you don't have to specify the logic, but you should use an abstract fucntion like 'derive_answer_with_explantion' which outputs both reasons and proper answer for the situation.",
        "",
        "[Example 1]",
        "Task description:",
        "Given a series of navigation instructions, determine whether one would end up back at the starting point.",
        "",
        "Example task instances and the code usage:",
        "input_text = \"Take 7 steps left. Take 2 steps backward. Take 7 steps backward. Take 7 steps backward. Take 3 steps forward.\"",
        "final_answer = ends_up_at_start(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"Take 5 steps. Turn around. Take 10 steps. Turn right. Take 10 steps.\"",
        "final_answer = ends_up_at_start(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"Take 5 steps forward. Take 7 steps backward. Take 4 steps right. Take 10 steps backward. Take 4 steps backward.\"",
        "final_answer = ends_up_at_start(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "Format of the Final answer:",
        "'Yes' or 'No'",
        "",
        "Explanation:",
        "This task involves determining whether a series of movements brings a person back to their starting point. This requires tracking the person's position in a two-dimensional space and updating their location based on the instructions given.",
        "",
        "Analyzing the Task:",
        "It is crucial to process each of the instruction and keep track of the current position and direction to solve the task. Therefore, the variables tracking is an effective way to tackle the target task.",
        "",
        "Constructing the Code Prompt:",
        "",
        "1. Initializing Position and Direction: The person starts at a fixed point (0,0) facing a specific direction (e.g., north). This setup requires initializing variables for x and y coordinates, and a variable for direction.",
        "",
        "2. Parsing Instructions: The instructions are separated and parsed to identify the type and magnitude of each movement. This involves string manipulation and possibly a mapping of textual instructions to movements and turns.",
        "",
        "3. [Variables tracking] Processing Each Instruction: Each instruction affects the position or the direction of movement. The intermediate step for calculating the final coordinate should be printed out using print() function. This involves:",
        "",
        "- Translating forward, backward, left, and right steps into changes in the x and y coordinates.",
        "- Handling turns to update the direction of movement.",
        "- A function like process_instruction can be created to encapsulate the logic for each instruction.",
        "",
        "4. Checking the Final Position and Returning the Result: After processing all instructions, the final coordinates are compared with the starting point to determine if the person has returned to the start. Based on whether the final position matches the starting point, the function returns 'Yes' or 'No'.",
        "",
        "Code prompt:",
        "def ends_up_at_start(input_text):",
        "    # Step 1: Initialize coordinates and direction by setting the starting point at (0, 0) and face north.",
        "    cur_x, cur_y = 0, 0",
        "    cur_direction = 0",
        "",
        "    # Step 2: Identify and list up instructions from the input text.",
        "    instructions = parse_instructions(input_text)",
        "    ",
        "    # Step 3: Process each instruction and update the current coordinates and direction. In order to keep track of changes, output the instruction, current and updated coordinates and direction.",
        "    for i, instruction in enumerate(instructions):",
        "        new_x, new_y, new_direction = process_instruction(instruction, cur_x, cur_y, cur_direction) # process instruction to calculate new position and direction",
        "        print(f\"Step {i}: {instruction} - current coordinates: ({cur_x}, {cur_y}), current direction: {cur_direction} -> updated coordinates: ({new_x}, {new_y}), updated direction: {new_direction}\")",
        "        cur_x, cur_y, cur_direction = new_x, new_y, new_direction",
        "",
        "    # Step 4: Return \"yes\" if the final coordinates are (0, 0). Otherwise, return \"no\" as the final answer.",
        "    return 'yes' if cur_x == 0 and cur_y == 0 else 'no'",
        "",
        "[Example 2]",
        "Task description:",
        "Name geometric shapes from their SVG paths.",
        "",
        "Example task instances and the code usage:",
        "input_text = \"This SVG path element <path d=\"M 18.51,5.48 L 34.19,27.80 A 27.27,27.27 243.03 0,1 8.20,30.73 L 18.51,5.48\"/> draws a",
        "Options:",
        "(A) circle",
        "(B) heptagon",
        "(C) hexagon",
        "(D) kite",
        "(E) line",
        "(F) octagon",
        "(G) pentagon",
        "(H) rectangle",
        "(I) sector",
        "(J) triangle\"",
        "final_answer = recognize_shape_from_svg(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"This SVG path element <path d=\"M 22.06,65.18 L 22.58,64.52 L 7.52,52.61 L 7.00,53.26 L 22.06,65.18\"/> draws a",
        "Options:",
        "(A) circle",
        "(B) heptagon",
        "(C) hexagon",
        "(D) kite",
        "(E) line",
        "(F) octagon",
        "(G) pentagon",
        "(H) rectangle",
        "(I) sector",
        "(J) triangle",
        "(K) trapezoid\"",
        "final_answer = recognize_shape_from_svg(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"This SVG path element <path d=\"M 65.97,25.30 L 61.73,37.11 A 12.55,12.55 240.58 0,1 57.00,16.54 L 65.97,25.30\"/> draws a",
        "Options:",
        "(A) circle",
        "(B) heptagon",
        "(C) hexagon",
        "(D) kite",
        "(E) line",
        "(F) octagon",
        "(G) pentagon",
        "(H) rectangle",
        "(I) sector",
        "(J) triangle\"",
        "final_answer = recognize_shape_from_svg(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "Format of the Final answer:",
        "'(A)', '(B)', '(C)', ...",
        "",
        "Explanation:",
        "This task involves identifying the geometric shape formed by an SVG path. SVG (Scalable Vector Graphics) is a language for describing two-dimensional graphics in XML. The path element is used to define a path that can consist of lines, curves, arcs, and more. Understanding and interpreting these paths to determine the resulting shape is the challenge.",
        "",
        "Analyzing the Task:",
        "In order to understand the given SVG paths, it is crucial to keep track of the each coordinates, lines, and curves in the SVG paths. Therefore, variables tracking is effective to solve the task. However, after analyzing the given SVG paths, finding attributes and characteristics of the shape could need a really complicated operation. Thus, the free format reasoning is also needed to solve the task.",
        "",
        "Constructing the Code Prompt:",
        "1. Extracting SVG Path Data: The first step involves parsing the input text to extract the SVG path data.",
        "",
        "2. Initializing a coordinate map: Create a coordinate map that maps each coordinate with the other connected coordinates ",
        "",
        "3. [Variables tracking] Updating the coordinate map: Iterate over the parsed SVG paths, update the coordinate map referring to the each SVG path.",
        "",
        "4. Analyzing the characteristics of the shape referring to the coordinate map: According to the coordinate map, make an analysis over the shape.",
        "",
        "5. [Free format reasoning] Shape Identification: Identify reasons and the proper shape using the completed coordinates map and the analysis results. Use an abstract function like 'identify_shape_with_explanation' which outputs both the reason and the shape.",
        "",
        "6. Matching and Outputting the Answer: Parse the options from the input text, find the corresponding option from the given options, and only output the label of the option as the final answer to the question.",
        "",
        "Code prompt:",
        "def recognize_shape_from_svg(input_text):",
        "\t\t# Step 1: Get the SVG path data from the input text and generate the extracted SVG path.",
        "    paths = parse_path(input_text)",
        "    print(\"SVG paths:\\n \", paths)",
        "\t\t",
        "\t\t# Step 2: Initialize a coordinate map that maps each coordinate with the other connected coordinates and the connection type.",
        "    coordinate_map = dict()",
        "",
        "    # Step 3: Update the coordinate map referring to the each SVG path.",
        "    for i, path in enumerate(paths):",
        "      coordinate_map = update_coordinate_map(coordinate_map, path)",
        "      print(f\"Step {i} - path: {path}, updated coordinate map: {coordinate_map}\")",
        "",
        "\t\t# Step 4: Conduct calculation to analyze each characteristic of the shape.",
        "    analysis_results_dict = analyze_characteristics(coordinate_map)",
        "    print(f\"Anlysis results: {analysis_results_dict}\")",
        "",
        "\t\t# Step 5: Identify a geometric shape with reasons using the completed coordinates map and the analysis results.",
        "    reason_for_the_decision, name_of_the_shape = identify_shape_with_explanation(coordinate_map, analysis_results_dict)",
        "    print(f\"Reason for the decision: {reason_for_the_decision}\")",
        "    print(f\"Thus, the shape of the path is {name_of_the_shape}.\")",
        "",
        "\t\t# Step 6: Find the corresponding option from the given options and only output the label of the option as the final answer to the question.",
        "    options = parse_options(input_text)",
        "    print(f\"Options: {options}\")",
        "    answer = None",
        "    for option in options:",
        "      if name_of_the_shape in option:",
        "        answer = option[:3]",
        "    ",
        "    return answer",
        "",
        "[Example 3]",
        "Task description:",
        "Answer questions about a table of penguins and their attributes.",
        "",
        "Example task instances and the code usage:",
        "input_text = \"Here is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  And here is a similar table, but listing giraffes:",
        "name, age, height (cm), weight (kg)",
        "Jody, 5, 430, 620",
        "Gladys, 10, 420, 590",
        "Marian, 2, 310, 410",
        "Donna, 9, 440, 650",
        "What is the name of the last animal?",
        "Options:",
        "(A) Bernard",
        "(B) Donna",
        "(C) Gladys",
        "(D) Gwen",
        "(E) James\"",
        "final_answer = penguins_in_a_table(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"Here is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  We now add a penguin to the table:",
        "James, 12, 90, 12",
        "Which is the tallest penguin?",
        "Options:",
        "(A) Louis",
        "(B) Bernard",
        "(C) Vincent",
        "(D) Gwen",
        "(E) James\"",
        "final_answer = penguins_in_a_table(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"Here is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  Which is the heaviest penguin?",
        "Options:",
        "(A) Louis",
        "(B) Bernard",
        "(C) Vincent",
        "(D) Gwen",
        "(E) James\"",
        "final_answer = penguins_in_a_table(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "Format of the Final answer:",
        "'(A)', '(B)', '(C)', ...",
        "",
        "Explanation:",
        "This task revolves around interpreting and extracting specific pieces of information from structured data presented in tabular format. It focuses on a distinct query related to the attributes (age, height, weight) of individuals (penguins in this case) listed in the table.",
        "",
        "Analyzing the Task:",
        "To find target individual from the table referring to the question is hard to implement with a variables tracking method. Therefore, the free format reasoning could be a better way to solve the problem.",
        "",
        "Constructing the Code Prompt:",
        "1. Construct initial table: Parse information from the input text and present them in a table.",
        "",
        "2. Identifying a modification instruction: Parse instruction of further modification to the table.",
        "",
        "3. Updating the info tabel: If the required modification is exists, update the table according to it. Show the current table and updated table.",
        "",
        "4. [Free format reasoning] Identify question from input text and outputs the reasoning and the proper answer to the question. Use an abstract function like 'derive_answer_with_explanation' which outputs both the reasoning and the correct answer to the question.",
        "",
        "5. Choosing correct answer from the options: Identify options and match the result from the Step 4 with the given options.",
        "",
        "6. Returning the final answer: Return the final answer.",
        "",
        "Code prompt:",
        "def penguins_in_a_table(input_text):",
        "    # Step 1: Parse information from the input text and present them in a table.",
        "    penguin_info_table = make_table(input_text)",
        "    print(\"The following is a table containing information about each penguin:\\n\", penguin_info_table)",
        "",
        "    # Step 2: Parse instruction of further modification to the table.",
        "    required_modification_to_table = identify_required_modification(input_text)",
        "    print(f\"The instruction we must follow before answering the question is: {required_modification_to_table}\")",
        "",
        "    # Step 3: If the required modification is exists, update the table according to it. Show the current table and updated table.",
        "    if required_modification_to_table != None:",
        "        print(\"Update the current table upon the further modification.\")",
        "        print(f\"Current table: {penguin_info_table}\")",
        "        penguin_info_table = penguin_info_table.processing(required_modification_to_table)",
        "        print(f\"Updated table: {required_modification_to_table}\")",
        "    ",
        "    # Step 4: Identify question from input text and outputs the reasoning and the proper answer to the question.",
        "    question = identify_question(input_text)",
        "    print(f\"The question is: {question}\")",
        "    reason, pre_answer = derive_answer_with_explanation(penguin_info_table, question)",
        "    print(f\"Reason for the decision: {reason}\")",
        "    print(f\"Therefore, the answer is: {pre_answer}\")",
        "",
        "    # Step 5: Identify options and match the result from the Step 4 with the given options.",
        "    options = extract_options(input_text)",
        "    print(\"The answer options are:\\n\", options)",
        "    answer = None",
        "    for option in options:",
        "        if pre_answer in option:",
        "            answer = option[:3]",
        "            break",
        "    ",
        "    # Step 6: Return the final answer.",
        "    return answer",
        "",
        "[Example 4]",
        "Task description:",
        "Answer extremely simple questions about the colors of objects on a surface.",
        "",
        "Example task instances and the code usage:",
        "input_text = \"On the floor, you see a blue mug, a green teddy bear, a silver scrunchiephone charger, a brown dog leash, a mauve sheet of paper, and a fuchsia envelope. What color is the scrunchiephone charger?",
        "Options:",
        "(A) red",
        "(B) orange",
        "(C) yellow",
        "(D) green",
        "(E) blue",
        "(F) brown",
        "(G) magenta",
        "(H) fuchsia",
        "(I) mauve",
        "(J) teal",
        "(K) turquoise",
        "(L) burgundy",
        "(M) silver",
        "(N) gold",
        "(O) black",
        "(P) grey",
        "(Q) purple",
        "(R) pink\"",
        "final_answer = solve_colored_objects(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"On the floor, you see three yellow pairs of sunglasses, one silver plate, three yellow cat toys, and two yellow envelopes. If I remove all the envelopes from the floor, how many yellow items remain on it?",
        "Options:",
        "(A) zero",
        "(B) one",
        "(C) two",
        "(D) three",
        "(E) four",
        "(F) five",
        "(G) six",
        "(H) seven",
        "(I) eight",
        "(J) nine",
        "(K) ten",
        "(L) eleven",
        "(M) twelve",
        "(N) thirteen",
        "(O) fourteen",
        "(P) fifteen",
        "(Q) sixteen\"",
        "final_answer = solve_colored_objects(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "input_text = \"On the nightstand, I see a brown cat toy and a green bracelet. How many things are neither green nor brown?",
        "Options:",
        "(A) zero",
        "(B) one",
        "(C) two",
        "(D) three",
        "(E) four",
        "(F) five",
        "(G) six\"",
        "final_answer = solve_colored_objects(input_text)",
        "print(\"Final answer:\" + final_answer)",
        "",
        "Format of the Final answer:",
        "'(A)', '(B)', '(C)', ...",
        "",
        "Explanation:",
        "This task involves identifying specific attributes of items based on their descriptions and positions relative to each other. The task requires careful reading of the descriptions and analyzing the spatial relationships between the items.",
        "",
        "Analyzing the Task:",
        "The task involves interpreting the descriptions of items and their spatial relationships to answer specific questions. This task does not require variable tracking but rather a free format reasoning approach to extract the necessary information and make logical deductions.",
        "",
        "Constructing the Code Prompt:",
        "",
        "1. Parse the descriptions: Extract the descriptions of items and their colors from the input text.",
        "",
        "2. Identify the spatial relationships: Determine the positions of items relative to each other based on the descriptions provided.",
        "",
        "3. [Free format reasoning] Derive the answer with explanation: Analyze the descriptions and spatial relationships to answer the specific question posed in the task. Use a function like 'derive_answer_with_explanation' to provide both the reasoning and the correct answer.",
        "",
        "4. Match the answer with the options: Compare the derived answer with the given options and select the correct one.",
        "",
        "5. Return the final answer: Output the final answer in the specified format.",
        "",
        "By following these steps, the task can be effectively solved by reasoning through the descriptions and spatial relationships of the items provided in the task instances.",
        "",
        "Code prompt:"
    ],
    "output": [
        [
            "def solve_colored_objects(input_text):",
            "    # Step 1: Extract the descriptions of items and their colors from the input text.",
            "    items = parse_items(input_text)",
            "    print(\"Items on the surface:\\n\", items)",
            "",
            "    # Step 2: Determine the positions of items relative to each other based on the descriptions provided.",
            "    spatial_relationships = analyze_spatial_relationships(items)",
            "    print(\"Spatial relationships between items:\\n\", spatial_relationships)",
            "",
            "    # Step 3: Derive the answer with explanation by analyzing the descriptions and spatial relationships.",
            "    question = identify_question(input_text)",
            "    print(\"The question is:\", question)",
            "    reason, answer = derive_answer_with_explanation(items, spatial_relationships, question)",
            "    print(\"Reasoning for the answer:\", reason)",
            "",
            "    # Step 4: Compare the derived answer with the given options and select the correct one.",
            "    options = extract_options(input_text)",
            "    print(\"Answer options:\\n\", options)",
            "    final_answer = None",
            "    for option in options:",
            "        if answer in option:",
            "            final_answer = option[:3]",
            "            break",
            "",
            "    # Step 5: Return the final answer.",
            "    return final_answer"
        ]
    ]
}